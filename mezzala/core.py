# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['DixonColesParameterKey', 'offence_key', 'defence_key', 'RHO_KEY', 'HFA_KEY', 'AVG_KEY', 'OFFENCE_KEY',
           'DEFENCE_KEY', 'UniformWeight', 'ExponentialWeight']

# Cell
import abc
import collections
import dataclasses
import itertools
import typing
import functools
import json

import numpy as np
import scipy.stats
import scipy.optimize

# Cell

# Parameter keys

@dataclasses.dataclass(frozen=True)
class DixonColesParameterKey:
    label: typing.Hashable


# Model constants
RHO_KEY = DixonColesParameterKey('Rho')
HFA_KEY = DixonColesParameterKey('Home-field advantage')
AVG_KEY = DixonColesParameterKey('Average rate')

OFFENCE_KEY = DixonColesParameterKey('Offence')
DEFENCE_KEY = DixonColesParameterKey('Defence')


def offence_key(label):
    return (OFFENCE_KEY, label)


def defence_key(label):
    return (DEFENCE_KEY, label)

# Cell

class UniformWeight:
    @staticmethod
    def __call__(row):
        return 1.0


class ExponentialWeight:
    def __init__(self, epsilon, key):
        self.epsilon = epsilon
        self.key = key

    def __call__(self, row):
        return np.exp(self.epsilon*self.key(row))